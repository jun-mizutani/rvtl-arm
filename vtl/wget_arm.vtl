
1000 :----------------------------------------------------------------------
1010 : wget for rvtl  2015/08/30
1020 :
1030 : rvtl wget_xx.vtl - 8.8.8.8 www.mztn.org /index.html
1040 :                    DNS_IP      HOST        PATH
1050 :----------------------------------------------------------------------
1060 :
1070 *=*+(1024*1024) z=&
1080 CacheSize=32*1024
1090 s=z z=z+256       : ip
1100 u=z z=z+256       : URL or PATH
1110 h=z z=z+256       : host
1120 b=z z=z+CacheSize
1130 H=z z=z+(256*1024)
1140 d=z d=z+256       : dns ip
1150 q=z z=z+512       : dns buffer
1160 B=z z=z+512       : DNS Response buffer
1170 W=z z=z+512       : NAME
1180 U=z z=z+256       : User-Agent
1190 U*="Mozilla/4.0 (compatible; rvtl64; Linux)"
1200 Q=z z=z+256       : Referer
1210 Q*="http://www.mztn.org/"
1220 :
1230 [=0 :
1240 :------------------------------
1250 : Get parameters from command line.
1260 d*=\0             : DNS IP address
1270 "DNS:" $*=d /
1280 ;=%=0 !=^Usage / #=-1
1290 h*=\1             : host
1300 $*=h /
1310 ;=%=0 !=^Usage / #=-1
1320 u*=\2             : path
1330 $*=u /
1340 ;=%=0 !=^Usage / #=-1
1350 [=1
1360 :------------------------------
1370 : Get ip address from DNS.
1380 R=`&$FFFF
1390 !=^AdrByName
1400 ;=r<>0 !=^CheckDnsRes : P=host_ip
1410 :
1420 :------------------------------
1430 : Get web page via http.
1440 !=^HttpConnect
1450 !=^HttpGet
1460 j=0 m=0
1470 t=1 u=0 : timeout (2sec)
1480 @
1490   !=^CheckRead
1500   ;=r=0 j=j+1 "." #=^TryAgain
1510   !=^HttpRecieve
1520   ;=r<>0 m=m+r !=^AppendBuffer j=0
1530   ;=r=0 j=99
1540  ^TryAgain
1550 
1560 @=(j>5)
1570 / "recieve " ?=m " bytes" / /
1580  $*=H /
1590 :------------------------------
1600 : 終了
1610 #=-1
1620 :
1630 :------------------------------
1640 : バッファに追記
1650 ^AppendBuffer
1660    H*=H k=% : 長さを k に
1670    p=H+k    : 末尾位置
1680    p*=b     : 追加
1690  ]:
1700 :
1710 :-------------------------------------------------
1720 : print usage
1730 :-------------------------------------------------
1740 ^Usage
1750   "example : rvtl  wget_XX.vtl - 8.8.8.8 www.mztn.org /index.html"
1760   "usage   :        wget64       DNS_IP      HOST         PATH"
1770 ]
1780 :
1790 :-------------------------------------------------
1800 : make DNS query packet
1810 :  enter  h : hostname
1820 :         R : identification
1830 :         q : buffer
1840 :  return q[] : DNS query packet
1850 :         r : # of bytes
1860 :-------------------------------------------------
1870 ^DNS_query
1880   +pgijk
1890   r=R !=^ConvEndian2 q{0}=r     : ID
1900   q{1}=$0001 : query=0,Opcode=0 (network order)
1910   q{2}=$0100 : 1 question (network order)
1920   q{3}=$0000
1930   q{4}=$0000
1940   q{5}=$0000
1950   : h     [myhost.example.com]
1960   : q{6}- [6myhost7example3com0]
1970   p=q+(2*6)
1980   i=0
1990   j=0
2000   h*=h
2010   g=%
2020   i=0
2030   @
2040     ;=(h(i)<>'.')&(h(i)<>0) #=^DQ01
2050     ;=i=0 #=^DQ01
2060     p(0)=j    : pascal string
2070     p=p+1
2080     k=0
2090     @
2100       p(0)=h(i-j+k)
2110       p=p+1
2120       k=k+1
2130     @=(k>=j)
2140     j=0
2150     i=i+1
2160   ^DQ01
2170     j=j+1
2180     i=i+1
2190   @=(i>=(g+1))
2200   p(0)=0
2210   p=p+1
2220   :
2230   p{0}=$0100  : Type(network order)
2240   p=p+2
2250   p{0}=$0100  : Class(network order)
2260   r=p+2-q
2270   -kjigp
2280 ]
2290 :
2300 :-------------------------------------------------
2310 : Request DNS
2320 : enter   d : dns ip string
2330 :         h : hostname string
2340 :         R : ID
2350 : return  r : if 0, recieve error
2360 :-------------------------------------------------
2370 ^AdrByName
2380   +szcput
2390   s=z z=z+16
2400   c=z z=z+48
2410   !=^SocketUDP
2420   ;=r<0 "Socket Error! " ?=r / #=-1
2430   f=r
2440   !=^DNS_query
2450   t=q
2460   u=r
2470   p=53
2480   !=^SendToBuf
2490   ;=r<0 "SendTo Error! " ?=r / #=-1
2500   "SendTo " ?=r "bytes" /
2510   :---- response ----
2520   u=512
2530   !=^ReadWait5s
2540   ;=r=0 / "No response in 5sec." / #=^ABNexit
2550   !=^RecvFromBuf
2560   ;=r<0 "RecvFrom Error! " ?=r / #=-1
2570   "recieve " ?=r " bytes" /
2580 ^ABNexit
2590   -tupczs
2600 ]
2610 :
2620 :-------------------------------------------------
2630 : Check DNS response
2640 : enter   q : buffer
2650 :         n : response size
2660 :         R : ID
2670 : return  r : ip address
2680 :-------------------------------------------------
2690 ^CheckDnsRes
2700   +ABCDETU
2710   r=q{0} !=^ConvEndian2 S=r : ID
2720   ;=S<>R  "ID [" ??=S ":" ??=R "] doesnot match." /
2730   / "ID      : " ?#=S /
2740   r=q{2} !=^ConvEndian2 A=r : QDCount
2750   r=q{3} !=^ConvEndian2 B=r : ANCount
2760   r=q{4} !=^ConvEndian2 U=r : NSCount
2770   r=q{5} !=^ConvEndian2 D=r : ARCount
2780   p=q+12
2790   ;=A=0 #=^ANCount
2800   !=^CheckName
2810   r=p{0} !=^ConvEndian2 T=r : TYPE
2820   r=p{1} !=^ConvEndian2 C=r : CLASS
2830   p=p+4
2840 ^ANCount
2850   E=B+U+D
2860   ;=E=0 ]
2870   I=0,E-1
2880     ;=(I<>0)|(B<=0) #=^ANNext
2890       !=^CheckName
2900       r=p{0} !=^ConvEndian2 T=r : TYPE
2910       r=p{1} !=^ConvEndian2 C=r : CLASS
2920       r=p[2] !=^ConvEndian4 L=r : TTL
2930       r=p{4} !=^ConvEndian2 N=r : RDLENGTH
2940       p=p+10
2950       P=(p(0)<<24)+(p(1)<<16)+(p(2)<<8)+p(3) : IP
2960     ^ANNext
2970   @=I+1
2980   -UTEDCBA
2990 ]
3000 :
3010 :-------------------------------------------------
3020 : Check Name
3030 : enter   q : buffer
3040 :         p : top of Name
3050 :         n : response size
3060 :         R : ID
3070 : return  r : ip address
3080 :-------------------------------------------------
3090 ^CheckName
3100   ;=p(0)=0 p=p+1 "(none)" / ]
3110   +s
3120   s=W
3130   e=0
3140   @
3150     !=^NameField
3160   @=(e=1)
3170   -s
3180 ]
3190 :
3200 :-------------------------------------------------
3210 : Name
3220 :-------------------------------------------------
3230 ^NameField
3240   ;=e=1 ]
3250   ;=(p(0)&$C0)<>0 !=^MesgDecomp ]
3260   @
3270     !=^PStringCopy
3280     p=p+r
3290     s=s+r
3300     ;=p(0)<>0 s(0)='.' $='.' s=s+1
3310   @=((p(0)=0)|((p(0)&$C0)<>0))
3320   ;=p(0)=0 p=p+1 e=1 /
3330 ]
3340 :
3350 :-------------------------------------------------
3360 : Message Decompression
3370 :-------------------------------------------------
3380 ^MesgDecomp
3390   +p
3400   o=(p(0)*256+p(1))&$3FFF : calc offset
3410   p=q+o
3420   @
3430     !=^NameField
3440   @=(e=1)
3450   -p
3460   p=p+2
3470 ]
3480 :
3490 :-------------------------------------------------
3500 : Pascal String Copy to buffer
3510 : enter   s : buffer to copy string
3520 :         x : pointer to next char
3530 :-------------------------------------------------
3540 ^PStringCopy
3550   +ni
3560   n=p(0)
3570   i=1,n
3580     s(i)=p(i) $=p(i)
3590   @=i+1
3600   s(n+1)=0
3610   r=n+1
3620   -in
3630 ]
3640 :
3650 :-------------------------------------------------
3660 : Check RData
3670 : enter   q : buffer
3680 :         p : top of RData
3690 :         n : RData length
3700 : return  r :
3710 :-------------------------------------------------
3720 ^CheckRData
3730   "  RDATA   : "
3740   ;=T=1 ?=p(0) "." ?=p(1) "." ?=p(2) "." ?=p(3) /
3750   ;=T=2 !=^CheckName ]
3760   p=p+N
3770 ]
3780 :
3790 :-------------------------------------------------
3800 : HTTP Connect
3810 : enter   P : ip number
3820 : return  f : socket fd
3830 :-------------------------------------------------
3840 ^HttpConnect
3850   +ap
3860   !=^SocketTCP
3870   ;=r<0 "Socket Error! " ?=r / #=-1
3880   f=r
3890   p=80
3900   : !=^inet_ntoa  : 文字列をIP整数に変換
3910   a=P
3920   !=^ConnectIP
3930   ;=r<0 "Connect Error! " ?=r / #=-1
3940   -pa
3950 ]
3960 :
3970 :-------------------------------------------------
3980 :HTTP GET
3990 : enter   s : ip string
4000 :         u : URL string
4010 :-------------------------------------------------
4020 ^HttpGet
4030   +tzn
4040   u*=u             : URL length
4050   n=256
4060   ;=%>256 n=%
4070   t=z z=z+n
4080   :!=^HttpConnect
4090   t*="GET "
4100   !=^SendBuffer
4110   t*=u
4120   !=^SendBuffer
4130   t*=" HTTP/1.0"
4140   !=^SendBuffer
4150   !=^SendCRLF
4160   h*=h
4170   ;=%=0 !=^SendCRLF -nzt ] : if no host, exit
4180   t*="Host: "
4190   !=^SendBuffer
4200   t*=h
4210   !=^SendBuffer
4220   !=^SendCRLF
4230   t*="Referer: "
4240   !=^SendBuffer
4250   t*=Q
4260   !=^SendBuffer
4270   !=^SendCRLF
4280   t*="User-Agent: "
4290   !=^SendBuffer
4300   t*=U
4310   !=^SendBuffer
4320   !=^SendCRLF
4330   !=^SendCRLF
4340   -nzt
4350 ]
4360 :
4370 :-------------------------------------------------
4380 :HTTP Recieve
4390 : enter   b : buffer
4400 :         n : buffer size
4410 : return  b : contents
4420 :-------------------------------------------------
4430 ^HttpRecieve
4440   +n
4450   n=CacheSize
4460   !=^RecvBuffer
4470   -n
4480 ]
4490 :
4500 

10000 :=================================================
10010 : rvtl(arm32) library for network  2015/08/30
10020 :
10030 :=================================================
10040 : z=&
10050 
10060 :-------------------------------------------------
10070 : enter   a : syscall#
10080 : return  r : fd, negative(error)
10090 :-------------------------------------------------
10100 ^SocketCall
10110   +bcdefg
10120   b=c[0]
10130   d=c[2]
10140   e=c[3]
10150   f=c[4]
10160   g=c[5]
10170   c=c[1]
10180   |zz
10190   r=|
10200   -gfedcb
10210 ]
10220 :
10230 :-------------------------------------------------
10240 :sys_socket
10250 : enter   c:引数配列名を代入
10260 :         c[0]=familyb
10270 :         c[1]=type
10280 :         c[2]=protocol
10290 : return  r : fd, negative(error)
10300 :-------------------------------------------------
10310 ^Socket
10320   +a
10330   a=281
10340   !=^SocketCall
10350   -a
10360 ]
10370 :
10380 :-------------------------------------------------
10390 :sys_bind
10400 : enter   c:引数配列名を代入
10410 :         c[0]=fd, c[1]=(sockaddr *)umyaddr,
10420 :         c[2]=addrlen
10430 : return  r
10440 :-------------------------------------------------
10450 ^Bind
10460   +a
10470   a=282
10480   !=^SocketCall
10490   -a
10500 ]
10510 :
10520 :-------------------------------------------------
10530 :sys_connect
10540 : enter   c:引数配列名を代入
10550 :         c[0]=fd, c[1]=sockaddr *uservaddr,
10560 :         c[2]=addrlen
10570 : return  r
10580 :-------------------------------------------------
10590 ^Connect
10600   +a
10610   a=283
10620   !=^SocketCall
10630   -a
10640 ]
10650 :
10660 :-------------------------------------------------
10670 :sys_listen
10680 : enter   c:引数配列名を代入
10690 :         c[0]=fd, c[1]=backlog
10700 : return  r
10710 :-------------------------------------------------
10720 ^Listen
10730   +a
10740   a=284
10750   !=^SocketCall
10760   -a
10770 ]
10780 :
10790 :-------------------------------------------------
10800 :sys_accept
10810 : enter   c:引数配列名を代入
10820 :         c[0]=fd, c[1]=sockaddr *upeer_sockaddr,
10830 :         c[2]=*upeer_addrlen
10840 : return  r
10850 :-------------------------------------------------
10860 ^Accept
10870   +a
10880   a=285
10890   !=^SocketCall
10900   -a
10910 ]
10920 :
10930 :-------------------------------------------------
10940 :sys_getsockname
10950 : enter   c:引数配列名を代入
10960 :         c[0]=fd, c[1]=sockaddr *usockaddr,
10970 :         c[2]=*usockaddr_len
10980 : return  r
10990 :-------------------------------------------------
11000 ^GetSockName
11010   +a
11020   a=286
11030   !=^SocketCall
11040   -a
11050 ]
11060 :
11070 :-------------------------------------------------
11080 :sys_getpeername
11090 : enter   c:引数配列名を代入
11100 :         c[0]=fd, c[1]=sockaddr *usockaddr,
11110 :         c[2]=*usockaddr_len
11120 : return  r
11130 :-------------------------------------------------
11140 ^GetPeerName
11150   +a
11160   a=287
11170   !=^SocketCall
11180   -a
11190 ]
11200 :
11210 :-------------------------------------------------
11220 :sys_socketpair
11230 : enter   c:引数配列名を代入
11240 :         c[0]=family, c[1]=type,
11250 :         c[2]=protocol, c[3]=usockvec[2]
11260 : return  r
11270 :-------------------------------------------------
11280 ^SocketPair
11290   +a
11300   a=288
11310   !=^SocketCall
11320   -a
11330 ]
11340 :
11350 :-------------------------------------------------
11360 :sys_send
11370 : enter   c:引数配列名を代入
11380 :         c[0]=fd, c[1]=void * buff,
11390 :         c[2]=size_t len,  c[3]=uint flags
11400 : return  r
11410 :-------------------------------------------------
11420 ^Send
11430   a=289
11440   !=^SocketCall
11450 ]
11460 :
11470 :-------------------------------------------------
11480 :sys_recv
11490 : enter   c:引数配列名を代入
11500 :         c[0]=fd, c[1]=void * ubuf,
11510 :         c[2]=size_t size, c[3]=uint flags
11520 : return  r
11530 :-------------------------------------------------
11540 ^Recv
11550   a=291
11560   !=^SocketCall
11570 ]
11580 :
11590 :-------------------------------------------------
11600 :sys_sendto
11610 : enter   c:引数配列名を代入
11620 :         c[0]=fd, c[1]=void * buff,
11630 :         c[2]=size_t len,  c[3]=uint flags,
11640 :         c[4]=sockaddr *addr, c[5]=addr_len
11650 : return  r
11660 :-------------------------------------------------
11670 ^SendTo
11680   +a
11690   a=290
11700   !=^SocketCall
11710   -a
11720 ]
11730 :
11740 :-------------------------------------------------
11750 :sys_recvfrom
11760 : enter   c:引数配列名を代入
11770 :         c[0]=fd, c[1]=void * ubuf,
11780 :         c[2]=size_t size, c[3]=uint flags,
11790 :         c[4]=sockaddr *addr, c[5]=*addr_len
11800 : return  r
11810 :-------------------------------------------------
11820 ^RecvFrom
11830   +a
11840   a=292
11850   !=^SocketCall
11860   -a
11870 ]
11880 :
11890 :-------------------------------------------------
11900 :sys_shutdown
11910 : enter   c:引数配列名を代入
11920 :         c[0]=fd, c[1]=how
11930 : return  r
11940 :-------------------------------------------------
11950 ^Shutdown
11960   +a
11970   a=210
11980   !=^SocketCall
11990   -a
12000 ]
12010 :
12020 :-------------------------------------------------
12030 :sys_setsockopt
12040 : enter   c:引数配列名を代入
12050 :         c[0]=fd, c[1]=level, c[2]=optname,
12060 :         c[3]=char *optval, c[4]=optlen
12070 : return  r
12080 :-------------------------------------------------
12090 ^SetSockopt
12100   +a
12110   a=208
12120   !=^SocketCall
12130   -a
12140 ]
12150 :
12160 :-------------------------------------------------
12170 :sys_getsockopt
12180 : enter   c:引数配列名を代入
12190 :         c[0]=fd, c[1]=level, c[2]=optname,
12200 :         c[3]=char *optval, c[4]=*optlen
12210 : return  r
12220 :-------------------------------------------------
12230 ^GetSockopt
12240   +a
12250   a=209
12260   !=^SocketCall
12270   -a
12280 ]
12290 :
12300 :-------------------------------------------------
12310 :sys_sendmsg
12320 : enter   c:引数配列名を代入
12330 :         c[0]=fd, c[1]=msghdr *msg,
12340 :         c[2]=uint flags
12350 : return  r
12360 :-------------------------------------------------
12370 ^SendMsg
12380   +a
12390   a=211
12400   !=^SocketCall
12410   -a
12420 ]
12430 :
12440 :-------------------------------------------------
12450 : sys_recvmsg
12460 : enter   c:引数配列名を代入
12470 :         c[0]=fd, c[1]=msghdr *msg,
12480 :         c[2]=uint flags
12490 : return  r
12500 :-------------------------------------------------
12510 ^RecvMsg
12520   +a
12530   a=212
12540   !=^SocketCall
12550   -a
12560 ]
12570 :
12580 :=================================================
12590 : Network Utility
12600 :=================================================
12610 :-------------------------------------------------
12620 : select
12630 : enter   f : file descriptor
12640 :         t : t[0]=sec, t[1]=usec
12650 : return  r : contents
12660 :-------------------------------------------------
12670 ^Select
12680   +uvxyzabcdefgi
12690   u=z z=z+128
12700   i=0,15 u[i]=0 @=i+1 : FD_ZERO
12710   x=f/64  y=1<<%
12720   u[x]=u[x]|y
12730   t[1]=t[1]*1000
12740   b=f+1     : fd + 1 の値を渡す
12750   c=u       : fd_set
12760   d=0
12770   e=0
12780   f=t       : timeval
12790   g=0
12800   a=335     : sys_pselect6
12810   |zz
12820   r=|
12830   -igfedcbazyxvu
12840 ]
12850 :
12860 :-------------------------------------------------
12870 : CheckRead
12880 : enter   f : file descriptor
12890 :         t : sec (timeout)
12900 :         u : msec (timeout)
12910 : return  r : contents
12920 :-------------------------------------------------
12930 ^CheckRead
12940   +ztm
12950   m=u*1000    : msec
12960   t=z z=z+16
12970   t[0]=t      : sec
12980   t[1]=m      : usec
12990   !=^Select
13000   -mtz
13010 ]
13020 :
13030 :-------------------------------------------------
13040 : ReadWait
13050 : enter   f : file descriptor
13060 : return  r : contents
13070 :-------------------------------------------------
13080 ^ReadWait
13090   +tu
13100   t=0     : 0sec
13110   u=500   : 500msec
13120   !=^CheckRead
13130   -ut
13140 ]
13150 :
13160 :-------------------------------------------------
13170 : ReadWait5s
13180 : enter   f : file descriptor
13190 : return  r : contents
13200 :-------------------------------------------------
13210 ^ReadWait5s
13220   +zt
13230   t=z z=z+16
13240   t[0]=5      : sec
13250   t[1]=0      : usec
13260   !=^Select
13270   -tz
13280 ]
13290 :
13300 :-------------------------------------------------
13310 : IPアドレス文字列から NetworkOrder の32bit整数
13320 : in  s : IPアドレス文字列のバッファ先頭アドレス
13330 : out r : 32ビット整数のIPアドレス(big endian)
13340 :-------------------------------------------------
13350 ^inet_ntoa
13360   +zij
13370   r=0
13380   i=0
13390   @
13400     j=0 r=r<<8
13410     @
13420       j=j*10+(s(i)-$30)
13430       i=i+1
13440     @=((s(i)='.')|(s(i)=0))
13450     r=r|(j&$FF)
13460     ;=(s(i)='.') i=i+1
13470   @=(s(i)=0)
13480   -jiz
13490 ]
13500 :
13510 :-------------------------------------------------
13520 : 数値 --> 10進数文字列変換
13530 :
13540 : a の数値を文字列に変換して s からの領域に
13550 : 文字列として返す。
13560 : r に文字数を返す
13570 :-------------------------------------------------
13580 ^itoa
13590     +aij
13600     i=0
13610     @
13620       a=a/10 +=%  : スタックにプッシュ
13630       i=i+1
13640     @=(a=0)
13650     j=0
13660     @
13670       i=i-1
13680       s(j)=;+$30  : スタックからポップ
13690       j=j+1
13700     @=(i=0)
13710     s(j)=0
13720     r=j
13730     -jia
13740 ]
13750 :
13760 :-------------------------------------------------
13770 : NetworkOrder の32bit整数からIPアドレス文字列
13780 : in  s : バッファ先頭アドレス
13790 : in  a : 32ビット整数のIPアドレス
13800 : out s : IPアドレス文字列
13810 :-------------------------------------------------
13820 ^inet_aton
13830   +sabcde
13840   b=a>>24
13850   c=(a>>16)&$FF
13860   d=(a>>8)&$FF
13870   e=a&$FF
13880   a=b !=^itoa
13890   s(r)='.'
13900   a=c s=s+r+1 !=^itoa
13910   s(r)='.'
13920   a=d s=s+r+1 !=^itoa
13930   s(r)='.'
13940   a=e s=s+r+1 !=^itoa
13950   s(r)=0
13960   -edcbas
13970 ]
13980 :
13990 :-------------------------------------------------
14000 : 2バイト整数のエンディアンを反転、上位桁はゼロ
14010 : in  : r
14020 : out : r
14030 :-------------------------------------------------
14040 ^ConvEndian2
14050   +n
14060   r=r&$ffff
14070   n=r>>8
14080   r=r<<8&$ff00
14090   r=r|n
14100   -n
14110 ]
14120 :
14130 :-------------------------------------------------
14140 : 4バイト整数のエンディアンを反転
14150 : in  : r
14160 : out : r
14170 :-------------------------------------------------
14180 ^ConvEndian4
14190   +nm
14200   n=r>>16
14210   r=r&$ffff
14220   !=^ConvEndian2
14230   m=r<<16
14240   r=n
14250   !=^ConvEndian2
14260   r=m|r
14270   -mn
14280 ]
14290 :
14300 :-------------------------------------------------
14310 :socket (TCP)
14320 : return  r : fd, negative(error)
14330 :-------------------------------------------------
14340 ^SocketTCP
14350   +cz
14360   c=z z=z+48
14370   c[0]=2   : AF_INET
14380   c[1]=1   : SOCK_STREAM
14390   c[2]=0   : TCP(6)
14400   !=^Socket
14410   -zc
14420 ]
14430 :
14440 :-------------------------------------------------
14450 :socket (UDP)
14460 : return  r : fd, negative(error)
14470 :-------------------------------------------------
14480 ^SocketUDP
14490   +cz
14500   c=z z=z+48
14510   c[0]=2   : AF_INET
14520   c[1]=2   : SOCK_DGRAM
14530   c[2]=17  : UDP
14540   !=^Socket
14550   -zc
14560 ]
14570 :
14580 :-------------------------------------------------
14590 :SockAddr
14600 : enter   s : sockaddr 領域確保済みのこと
14610 :         p : port
14620 :         a : ipaddress
14630 :
14640 :    +---+---+---+---+---+---+---+---+-------+
14650 :    | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 -15 |
14660 :    +---+---+---+---+---+---+---+---+-------+
14670 :    |family |  port |   address     | all 0 |
14680 :    +---+---+---+---+---+---+---+---+-------+
14690 :     s{0}     s{1}        s[1]
14700 :
14710 : return  r :
14720 :         s : sockaddr
14730 :-------------------------------------------------
14740 ^SockAddr
14750   +iar
14760   i=0,3 s[i]=0 @=i+1
14770   s{0}=2   : AF_INET
14780   r=p
14790   !=^ConvEndian2
14800   s{1}=r   : port
14810   r=a
14820   !=^ConvEndian4
14830   s[1]=r   : address
14840   -rai
14850 ]
14860 
14870 :-------------------------------------------------
14880 :bind IP
14890 : enter   f : socket descripter
14900 :         p : port
14910 :         a : ipaddress (Network Order)
14920 : return  r
14930 :-------------------------------------------------
14940 ^BindIP
14950   +szci
14960   c=z z=z+48
14970   s=z z=z+16
14980   !=^SockAddr
14990   c[0]=f   : fd
15000   c[1]=s
15010   c[2]=16  : length of 2+14 in bytes
15020   !=^Bind
15030   -iczs
15040 ]
15050 :
15060 :-------------------------------------------------
15070 :connect IP
15080 : enter   f : socket descripter
15090 :         p : port
15100 :         a : ipaddress (Network Order)
15110 : return  r
15120 :-------------------------------------------------
15130 ^ConnectIP
15140   +szci
15150   c=z z=z+48
15160   s=z z=z+16
15170   !=^SockAddr
15180   c[0]=f   : fd
15190   c[1]=s
15200   c[2]=16  : length of 2+14 in bytes
15210   !=^Connect
15220   -iczs
15230 ]
15240 :
15250 :-------------------------------------------------
15260 :send buffer
15270 : enter   f : socket fd
15280 :         t : string buffer
15290 : return  r
15300 :-------------------------------------------------
15310 ^SendBuffer
15320   +zc
15330   c=z z=z+48
15340   c[0]=f   : fd
15350   c[1]=t   : buffer
15360   t*=t     : get length
15370   c[2]=%   : length
15380   c[3]=0   : MSG_* flags
15390   !=^Send
15400   -cz
15410 ]
15420 :
15430 :-------------------------------------------------
15440 :send CRLF
15450 : enter   f : socket fd
15460 : return  r
15470 :-------------------------------------------------
15480 ^SendCRLF
15490   +zt
15500   t=z z=z+3
15510   t(0)=13
15520   t(1)=10
15530   t(2)=0
15540   !=^SendBuffer
15550   -tz
15560 ]
15570 :
15580 :-------------------------------------------------
15590 :recv buffer
15600 : enter   f : socket fd
15610 :         b : string buffer
15620 :         n : buffer size
15630 : return  r : length
15640 :-------------------------------------------------
15650 ^RecvBuffer
15660   +zc
15670   c=z z=z+48
15680   c[0]=f   : fd
15690   c[1]=b   : buffer
15700   c[2]=n   : buffer size
15710   c[3]=0   : MSG_* flags
15720   !=^Recv
15730   -cz
15740 ]
15750 :
15760 :-------------------------------------------------
15770 : SendToBuffer
15780 : enter   f : socket fd
15790 :         t : buffer
15800 :         u : buffer length
15810 :         d : ip string
15820 :         p : port
15830 : return  r
15840 :-------------------------------------------------
15850 ^SendToBuf
15860   +saz
15870   s=d
15880   !=^inet_ntoa  : 文字列をIP整数に変換
15890   a=r
15900   s=z z=z+16
15910   !=^SockAddr
15920   c[0]=f
15930   c[1]=t
15940   c[2]=u
15950   c[3]=0
15960   c[4]=s
15970   c[5]=16
15980   !=^SendTo
15990   -zas
16000 ]
16010 :
16020 :-------------------------------------------------
16030 : RecvFromBuffer
16040 : enter   f : socket fd
16050 :         t : buffer
16060 :         u : buffer length
16070 :         d : ip string
16080 :         p : port
16090 : return  r
16100 :-------------------------------------------------
16110 ^RecvFromBuf
16120   +sazn
16130   n=z z=z+4
16140   s=d
16150   !=^inet_ntoa  : 文字列をIP整数に変換
16160   a=r
16170   s=z z=z+16
16180   n[0]=16
16190   !=^SockAddr
16200   c[0]=f
16210   c[1]=t
16220   c[2]=u
16230   c[3]=0
16240   c[4]=s
16250   c[5]=n
16260   !=^RecvFrom
16270   -nzas
16280 ]
16290 :
16300 
